const test       = require('tap').test
    , testCommon = require('./common')
    , leveldown  = require('../')
    , collectEntries = testCommon.collectEntries

var db

module.exports.setUp = function (leveldown) {
  test('setUp common', testCommon.setUp)
  test('setUp db', function (t) {
    db = leveldown(testCommon.location())
    db.open(t.end.bind(t))
  })
}

module.exports.mixedEncoding = function () {
  test('test simple iterator()', function (t) {
    var data = [
            { type: 'put', key: 'foobatch1', value: 'bar1' }
          , { type: 'put', key: 'foobatch2', value: 'bar2' }
          , { type: 'put', key: 'foobatch3', value: 'bar3' }
        ]
      , idx = 0

    db.batch(data, function (err) {
      t.notOk(err, 'no error')

      var iterator = db.iterator({ keyAsBuffer: false, valueAsBuffer: false })
        , fn = function (err, key, value) {
            t.notOk(err, 'no error')
            if (key && value) {
              t.equal(key.toString(), data[idx].key, 'correct key')
              t.equal(value.toString(), data[idx].value, 'correct value')
              process.nextTick(next)
              idx++
            } else { // end
              t.type(err, 'undefined', 'err argument is undefined')
              t.type(key, 'undefined', 'key argument is undefined')
              t.type(value, 'undefined', 'value argument is undefined')
              t.equal(idx, data.length, 'correct number of entries')
              iterator.end(function () {
                t.end()
              })
            }
          }
        , next = function () {
            iterator.next(fn)
          }

      next()
    })
  })
}

module.exports.tearDown = function () {
  test('tearDown', function (t) {
    db.close(testCommon.tearDown.bind(null, t))
  })
}

module.exports.all = function (leveldown) {
  module.exports.setUp(leveldown)
  module.exports.mixedEncoding()
  module.exports.tearDown()
}

if (require.main === module)
  module.exports.all(leveldown)